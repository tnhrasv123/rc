# File: achievements.sk
# Path: race-clicker/features/achievements.sk
# Description: Achievement system for Race Clicker

options:
    prefix: &6&lRaceClicker &8Â»
    achievementGUIPages: true # Enable pagination for achievements GUI
    achievementsPerPage: 28 # Max 4*7 items per page (28) for a 6-row GUI with borders

# --- Achievement Definitions ---
# Structure: {achievement::ID::name}, {achievement::ID::description}, {achievement::ID::icon} (item type string)
#            {achievement::ID::reward::message}, {achievement::ID::reward::command}, {achievement::ID::reward::clicks}, {achievement::ID::reward::prestige_points}
#            {achievement::ID::condition::type} (e.g., "clicks", "speed_level", "races_won", "prestige_level")
#            {achievement::ID::condition::value} (target value for the condition type)

variables:
    {achievements_list::*} # List of all achievement IDs, populated on load
    {player::%uuid%::achievements::%id%} = boolean (unlocked status)
    {player::%uuid%::achievements_gui_page} = integer

on load:
    # Clear and define achievements
    delete {achievements_list::*}

    # Clicks Achievements
    defineAchievement("first_click", "&aFirst Click!", "&7Make your very first click.", "minecraft:lever", "clicks", 1, "&eYou've started your journey!", null, 10, null)
    defineAchievement("click_novice", "&aClick Novice", "&7Reach 100 total clicks.", "minecraft:stone_pickaxe", "clicks", 100, null, null, 50, null)
    defineAchievement("click_adept", "&aClick Adept", "&7Reach 1,000 total clicks.", "minecraft:iron_pickaxe", "clicks", 1000, "&eGetting the hang of it!", null, 250, null)
    defineAchievement("click_master", "&6Click Master", "&7Reach 10,000 total clicks.", "minecraft:diamond_pickaxe", "clicks", 10000, "&eMaster of Clicks!", null, 1000, 1)

    # Upgrade Achievements
    defineAchievement("speed_demon_1", "&bSpeed Demon I", "&7Upgrade your speed to level 5.", "minecraft:feather", "speed_level", 5, "&eFaster clicks!", null, null, null)
    defineAchievement("auto_helper_1", "&bAuto Helper I", "&7Upgrade auto-clicker to level 3.", "minecraft:clock", "autoclicker_level", 3, "&ePassive income!", null, null, null)

    # Racing Achievements
    defineAchievement("first_race", "&eFirst Race", "&7Participate in your first race.", "minecraft:leather_boots", "races_participated", 1, "&eWelcome to the track!", null, null, null)
    defineAchievement("first_win", "&6First Victory!", "&7Win your first race.", "minecraft:gold_ingot", "races_won", 1, "&eChampion in the making!", "rcgivepoints %player% 5", 200, 1) # Example: rcgivepoints is a placeholder for a custom point system

    # Prestige Achievements
    defineAchievement("first_prestige", "&dFirst Prestige", "&7Achieve your first prestige.", "minecraft:nether_star", "prestige_level", 1, "&eA new beginning!", null, null, 5)

    # Track-Specific Achievements
    defineAchievement("track_master_1", "&6Track Master I", "&7Win on 3 different tracks.", "minecraft:map", "tracks_won", 3, "&eTrack Conqueror!", null, 500, 2)
    defineAchievement("track_speedster", "&bTrack Speedster", "&7Complete a track in under 10 seconds.", "minecraft:clock", "track_time", 10, "&eLightning Fast!", null, 1000, 3)
    defineAchievement("track_perfectionist", "&aTrack Perfectionist", "&7Complete a track with max combo throughout.", "minecraft:ender_eye", "max_combo", 100, "&ePerfect Timing!", null, 1500, 4)
    
    # Combo Achievements
    defineAchievement("combo_streak", "&6Combo Streak", "&7Maintain a combo of 50 clicks.", "minecraft:ender_pearl", "combo", 50, "&ePerfect Rhythm!", null, 750, 2)
    defineAchievement("combo_master", "&6Combo Master", "&7Maintain a combo of 100 clicks.", "minecraft:dragon_head", "combo", 100, "&eMaster of Timing!", null, 2000, 5)
    
    # Multiplayer Achievements
    defineAchievement("race_champion", "&6Race Champion", "&7Win 10 races against others.", "minecraft:trophy", "multiplayer_wins", 10, "&eRace Dominator!", null, 3000, 6)
    defineAchievement("race_legend", "&6Race Legend", "&7Win 50 races against others.", "minecraft:dragon_breath", "multiplayer_wins", 50, "&eRace Legend!", null, 5000, 10)
    
    # Special Achievements
    defineAchievement("track_perfection", "&6Track Perfection", "&7Complete every track at least once.", "minecraft:emerald_block", "all_tracks", 1, "&eTrack Master!", null, 2500, 8)
    defineAchievement("speed_record", "&6Speed Record", "&7Set a new track record.", "minecraft:clock", "track_record", 1, "&eSpeed Demon!", null, 1500, 4)
    defineAchievement("combo_record", "&6Combo Record", "&7Set a new combo record.", "minecraft:ender_pearl", "combo_record", 1, "&eCombo King!", null, 2000, 5)
    
    # TODO: Add more achievements for different aspects: specific track wins, high combo, etc.
    if {rc.debug_mode} is true: # Assuming global debug_mode is {rc.debug_mode} from race_clicker.sk
        broadcast "&7[Debug] Achievements loaded: %size of {achievements_list::*}% achievements defined."

function defineAchievement(id: text, name: text, desc: text, icon: text, condType: text, condVal: number, rwdMsg: text, rwdCmd: text, rwdClicks: number, rwdPrestige: number):
    add {_id} to {achievements_list::*}
    set {achievement::%{_id}%::name} to {_name}
    set {achievement::%{_id}%::description} to {_desc}
    set {achievement::%{_id}%::icon} to {_icon}
    set {achievement::%{_id}%::condition::type} to {_condType}
    set {achievement::%{_id}%::condition::value} to {_condVal}
    if {_rwdMsg} is set:
        set {achievement::%{_id}%::reward::message} to {_rwdMsg}
    if {_rwdCmd} is set:
        set {achievement::%{_id}%::reward::command} to {_rwdCmd}
    if {_rwdClicks} is set:
        set {achievement::%{_id}%::reward::clicks} to {_rwdClicks}
    if {_rwdPrestige} is set:
        set {achievement::%{_id}%::reward::prestige_points} to {_rwdPrestige}

# --- Achievement Detection Logic ---
function checkAchievements(p: player):
    set {_uuid} to {_p}'s uuid
    loop {achievements_list::*}:
        set {_id} to loop-value
        if {player::%{_uuid}%::achievements::%{_id}%} is not set: # Only check if not already unlocked
            set {_cond_type} to {achievement::%{_id}%::condition::type}
            set {_cond_val} to {achievement::%{_id}%::condition::value}
            set {_player_val} to 0
            
:start_line:90
-------
            if {_cond_type} is "clicks":
                set {_player_val} to {player::%{_uuid}%::clicks} ? 0
            else if {_cond_type} is "speed_level":
                set {_player_val} to {player::%{_uuid}%::speed_level} ? 0
            else if {_cond_type} is "autoclicker_level":
                set {_player_val} to {player::%{_uuid}%::autoclicker_level} ? 0
            else if {_cond_type} is "races_won":
                set {_player_val} to {player::%{_uuid}%::races_won} ? 0
            else if {_cond_type} is "races_participated":
                set {_player_val} to {player::%{_uuid}%::total_races_participated} ? 0
            else if {_cond_type} is "prestige_level":
                set {_player_val} to {player::%{_uuid}%::prestige_level} ? 0
            else if {_cond_type} is "track_wins":
                set {_player_val} to {player::%{_uuid}%::track_wins} ? 0
            else if {_cond_type} is "track_time":
                set {_player_val} to {player::%{_uuid}%::track_time} ? 0
            else if {_cond_type} is "max_combo":
                set {_player_val} to {player::%{_uuid}%::max_combo} ? 0
            else if {_cond_type} is "multiplayer_wins":
                set {_player_val} to {player::%{_uuid}%::multiplayer_wins} ? 0
            else if {_cond_type} is "all_tracks":
                set {_player_val} to {player::%{_uuid}%::completed_tracks} ? 0
            else if {_cond_type} is "track_record":
                set {_player_val} to {player::%{_uuid}%::track_records} ? 0
            else if {_cond_type} is "combo_record":
                set {_player_val} to {player::%{_uuid}%::combo_records} ? 0
          
            if {_player_val} >= {_cond_val}:
                tryUnlockAchievement({_p}, {_id})

# Function to attempt unlocking an achievement and give rewards
function tryUnlockAchievement(p: player, id: text):
    set {_uuid} to {_p}'s uuid
    if {player::%{_uuid}%::achievements::%{_id}%} is not set:
        set {player::%{_uuid}%::achievements::%{_id}%} to true
        set {_ach_name} to {achievement::%{_id}%::name}
        send title "&6Achievement Unlocked!" to {_p} with subtitle "&e%{_ach_name}%" for 3 seconds
        send "{@prefix} &aAchievement Unlocked: %{_ach_name}% &7- %{achievement::%{_id}%::description}%" to {_p}
        play sound "minecraft:ui.toast.challenge_complete" to {_p} with volume 1 pitch 1.2

        # Give rewards
        if {achievement::%{_id}%::reward::message} is set:
            send "{achievement::%{_id}%::reward::message}" to {_p}
        if {achievement::%{_id}%::reward::command} is set:
            execute console command "{achievement::%{_id}%::reward::command}" with arguments {_p}
        if {achievement::%{_id}%::reward::clicks} is set:
            add {achievement::%{_id}%::reward::clicks} to {player::%{_uuid}%::clicks}
        if {achievement::%{_id}%::reward::prestige_points} is set:
            set {_reward_prestige} to {achievement::%{_id}%::reward::prestige_points}
            add {_reward_prestige} to {player::%{_uuid}%::prestige_points}
            send "{@prefix} &dYou received %{_reward_prestige}% bonus prestige points!" to {_p}
            
        # Create achievement particles
        set {_loc} to location of {_p} add vector(0, 1, 0)
        loop 20 times:
            set {_angle} to loop-number * (360 / 20)
            set {_offset} to vector(sin({_angle}), 0, cos({_angle})) multiply 0.5
            spawn particle "happy_villager" at {_loc} add {_offset}
        # TODO: Add other reward types: exclusive upgrade discounts, special particle effects, unique citizen skins/accessories

# --- Visual Achievement Display (GUI) ---
command /achievements [<integer>]:
    aliases: /ach, /rcachievements
    trigger:
        if arg-1 is set:
            openAchievementsGUI(player, arg-1)
        else:
            openAchievementsGUI(player, 1)

function openAchievementsGUI(p: player, page: integer):
    set {_uuid} to {_p}'s uuid
    set {player::%{_uuid}%::achievements_gui_page} to {_page}
    create a gui with virtual chest inventory with 6 rows named "&8&nAchievements (Page %{_page}%)":
        set {_total_achievements} to size of {achievements_list::*}
        set {_totalPages} to ceil({_total_achievements} / {@achievementsPerPage})
        if {_totalPages} = 0:
            set {_totalPages} to 1 # Ensure totalPages is at least 1 to avoid division by zero or weird behavior
        if {_page} > {_totalPages}:
            set {_page} to {_totalPages}
        if {_page} < 1:
            set {_page} to 1
            
        # Check if achievements list is empty
        if size of {achievements_list::*} = 0:
            make gui slot 13 with red stained glass pane named "&cNo Achievements Available"
            make gui slot 45 with gray stained glass pane named " "
            make gui slot 49 with book named "&7Page %{_page}% of %{_totalPages}%"
            open last gui to {_p}
            return

        set {_start_index} to ({_page} - 1) * {@achievementsPerPage}
        set {_end_index} to {_start_index} + {@achievementsPerPage} - 1
        if {_end_index} >= {_total_achievements}:
            set {_end_index} to {_total_achievements} - 1

        set {_slot_index} to 0
        # Define the slots for achievements (center 4x7 area)
        set {_achievement_slots::*} to (10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43)

        loop {_achievement_slots::*}:
            set {_gui_item_slot} to loop-value
            set {_current_ach_index} to {_start_index} + {_slot_index}
            if {_current_ach_index} <= {_end_index} and {_current_ach_index} < {_total_achievements}:
                set {_id} to {achievements_list::%{_current_ach_index}%}
                set {_name} to {achievement::%{_id}%::name} ? "&cUnknown Achievement"
                set {_description} to {achievement::%{_id}%::description} ? "&7No description."
                set {_icon_item_string} to {achievement::%{_id}%::icon} ? "minecraft:barrier"
                set {_icon_item} to {_icon_item_string} parsed as item
                set {_unlocked} to {player::%{_uuid}%::achievements::%{_id}%} is set

                set {_lore::*} to ("&7ID: &8%{_id}%", "&e%{_description}%")
                if {achievement::%{_id}%::reward::message} is set:
                    add "" to {_lore::*}
                    add "&6Reward: &f%{achievement::%{_id}%::reward::message}%" to {_lore::*}
                if {achievement::%{_id}%::reward::clicks} is set:
                    add "&6Reward: &f%{achievement::%{_id}%::reward::clicks}% Clicks" to {_lore::*}
                if {achievement::%{_id}%::reward::prestige_points} is set:
                    add "&6Reward: &d%{achievement::%{_id}%::reward::prestige_points}% Prestige Points" to {_lore::*}

                if {_unlocked}:
                    make gui slot {_gui_item_slot} with {_icon_item} named "&a%{_name}% &7(Unlocked)" with lore {_lore::*} and "" and "&aYou have completed this!"
                else:
                    set {_condition_text} to "&cRequirement: %{achievement::%{_id}%::description}%"
                    # More specific condition text if possible, fallback to generic
                    if {achievement::%{_id}%::condition::type} is "clicks":
                        set {_condition_text} to "&cReach %{achievement::%{_id}%::condition::value}% total clicks."
                    else if {achievement::%{_id}%::condition::type} is "speed_level":
                        set {_condition_text} to "&cUpgrade speed to level %{achievement::%{_id}%::condition::value}%."
                    else if {achievement::%{_id}%::condition::type} is "autoclicker_level":
                        set {_condition_text} to "&cUpgrade auto-clicker to level %{achievement::%{_id}%::condition::value}%."
                    else if {achievement::%{_id}%::condition::type} is "races_won":
                        set {_condition_text} to "&cWin %{achievement::%{_id}%::condition::value}% race(s)."
                    else if {achievement::%{_id}%::condition::type} is "races_participated":
                        set {_condition_text} to "&cParticipate in %{achievement::%{_id}%::condition::value}% race(s)."
                    else if {achievement::%{_id}%::condition::type} is "prestige_level":
                        set {_condition_text} to "&cReach prestige level %{achievement::%{_id}%::condition::value}%."
                    
                    make gui slot {_gui_item_slot} with gray dye named "&7%{_name}% &c(Locked)" with lore {_lore::*} and "" and {_condition_text}
            else:
                # Fill remaining slots with placeholders
                make gui slot {_gui_item_slot} with black stained glass pane named " " # Fill empty achievement slots if page not full
            add 1 to {_slot_index}

        # Pagination and Border
        loop integers from 0 to 53:
            set {_current_slot} to loop-value
            if {_current_slot} < 9 or {_current_slot} > 44 or {_current_slot} mod 9 is 0 or {_current_slot} mod 9 is 8:
                if gui slot {_current_slot} is not set:
                    make gui slot {_current_slot} with gray stained glass pane named " "
        
        if {_page} > 1:
            make gui slot 45 with arrow named "&ePrevious Page" with lore "&7Click to go to page %{_page} - 1%" to run function openAchievementsGUI({_p}, {_page} - 1)
        else:
            make gui slot 45 with gray stained glass pane named " "

        make gui slot 49 with book named "&7Page %{_page}% of %{_totalPages}%" with lore "&7Total Achievements: %{_total_achievements}%"

        if {_page} < {_totalPages}:
            make gui slot 53 with arrow named "&eNext Page" with lore "&7Click to go to page %{_page} + 1%" to run function openAchievementsGUI({_p}, {_page} + 1)
        else:
            make gui slot 53 with gray stained glass pane named " "

    open last created gui to {_p}

# Call checkAchievements at appropriate times:
# - In clicking.sk: after a click is registered and total clicks updated.
# - In shop.sk: after an upgrade is purchased and level updated.
# - In racing.sk: after a race is won/participated and stats updated.
# - In prestige.sk: after a prestige and level updated.