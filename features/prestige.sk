# File: prestige.sk
# Path: race-clicker/features/prestige.sk
# Description: Prestige mechanics

options:
    prefix: &6&lRaceClicker &8Â» # Example prefix
    prestige_base_cost: 1000000 # Example: Clicks needed for first prestige
    prestige_cost_multiplier: 2 # Cost increases for subsequent prestiges
    prestige_points_per_prestige: 1 # Points gained per prestige

# --- Phase 8: Content and Progression Systems ---
# Enhanced Progression Features
# - TODO: Complete prestige system
#   - Fix prestige calculation formulas (cost, points gained)
#   - Add prestige-only upgrades (would be in shop.sk or a new prestige_shop.sk)
#   - Implement prestige point spending (in shop.sk or prestige_shop.sk)

# --- Phase 1: Fix and Complete Core Systems (related to shop GUI) ---
# - TODO: Prestige confirmation system (slot 22 in shop.sk calls a function here)

# --- Phase 3: Complete GUI Systems (related to shop GUI) ---
# - TODO: Implement prestige confirmation GUI (called from shop.sk)

# Variables:
# {player::%player's uuid%::prestige-level} - Current prestige level
# {player::%player's uuid%::prestige-points} - Currency for prestige shop

# Function called from shop.sk to open prestige confirmation
function openPrestigeConfirmationGUI(p: player):
    set {_current_prestige_level} to {player::%{_p}'s uuid%::prestige-level} ? 0
    set {_next_prestige_level} to {_current_prestige_level} + 1
    # Prestige calculation formulas
    # Cost: base_cost * (multiplier ^ current_prestige_level)
    # Ensure current_prestige_level is not negative if it's ever manually set to avoid math errors with ^ operator.
    set {_effective_prestige_level_for_cost} to {_current_prestige_level}
    if {_effective_prestige_level_for_cost} < 0:
        set {_effective_prestige_level_for_cost} to 0 # Prevent issues with negative exponent
    set {_prestige_cost} to round({@prestige_base_cost} * ({@prestige_cost_multiplier} ^ {_effective_prestige_level_for_cost}))

    # Points gained can be simple or dynamic. For now, simple.
    set {_points_to_gain} to {@prestige_points_per_prestige}
    # Example of dynamic points: set {_points_to_gain} to {@prestige_points_per_prestige} + floor({_current_prestige_level} / 5) # Extra point every 5 levels

    # Check if player can prestige
    if {player::%{_p}'s uuid%::clicks} < {_prestige_cost}:
        send "{@prefix} &cYou need at least %{_prestige_cost}% clicks to prestige!" to {_p}
        play sound "minecraft:entity.villager.no" to {_p}
        return

    create a gui with virtual chest inventory with 3 rows named "&5&lConfirm Prestige Lvl %{_next_prestige_level}%?":
        make gui slot 4 with nether star named "&d&lPrestige Information" with lore "&7Current Prestige Level: &e%{_current_prestige_level}%" and "&7Next Prestige Level: &e%{_next_prestige_level}%" and "" and "&7Cost to Prestige: &c%{_prestige_cost}% Clicks" and "&7Points on Prestige: &b%{_points_to_gain}% Prestige Points" and "" and "&cWARNING: Prestiging will reset your" and "&cclicks, speed, and auto-clicker levels!"

        make gui slot 11 with lime stained_glass_pane named "&a&lYES, PRESTIGE!" with lore "&7Reset progress for &b%{_points_to_gain}% Prestige Points." and "&7This action is irreversible!" to run function attemptPrestige({_p}, {_prestige_cost}, {_points_to_gain})

        make gui slot 15 with red stained_glass_pane named "&c&lNO, CANCEL!" with lore "&7Return to the shop." to run function openUpgradeShop({_p}) # Assumes openUpgradeShop is globally accessible or defined in shop.sk

        # Fill border
        loop 27 times:
            if gui slot (loop-number - 1) is not set:
                make gui slot (loop-number - 1) with purple stained glass pane named " "

    open last gui to {_p}

# Function to handle the actual prestige process
function attemptPrestige(p: player, cost: number, points_gained: number):
    close inventory of {_p} # Close the confirmation GUI

    # Double check cost (should be redundant if GUI logic is correct)
    if {player::%{_p}'s uuid%::clicks} < {_cost}:
        send "{@prefix} &cSomething went wrong. You don't have enough clicks." to {_p}
        return

    # Reset progress
    # NOTE: Keep track of what needs to be reset. Achievements? Stats? Track best times?
    # The plan implies clicks, speed, and auto-clicker. Other things might persist.
    set {player::%{_p}'s uuid%::clicks} to 0
    set {player::%{_p}'s uuid%::speed-level} to 1 # Reset to base
    set {player::%{_p}'s uuid%::autoclicker-level} to 0 # Reset to base
    # Add any other variables that should be reset upon prestiging

    # Grant prestige benefits
    add 1 to {player::%{_p}'s uuid%::prestige-level}
    add {_points_gained} to {player::%{_p}'s uuid%::prestige-points}

    send "{@prefix} &d&lCongratulations! You have prestiged to Level %{player::%{_p}'s uuid%::prestige-level}%!" to {_p}
    send "{@prefix} &7Your Clicks, Speed Level, and Auto-Clicker Level have been reset." to {_p}
    send "{@prefix} &7You gained &b%{_points_gained}% Prestige Points&7. You now have &b%{player::%{_p}'s uuid%::prestige-points}% total." to {_p}
    play sound "minecraft:entity.player.levelup" to {_p} with volume 1 pitch 0.5
    play sound "minecraft:entity.ender_dragon.growl" to {_p} with volume 0.5 pitch 1.5

    # Call achievement check for prestige related achievements
    if function "checkAchievements" exists:
        checkAchievements({_p}) # (from achievements.sk)
    else if {rc.debug_mode} is true:
        send "{@prefix} &cWarning: Function 'checkAchievements' not found. Prestige achievements may not be awarded." to console

    # TODO: Implement prestige-only upgrades and prestige point spending (likely in shop.sk or a new prestige_shop.sk)
    # For now, direct players to the main shop (which might show new options based on prestige level or allow spending prestige points)
    send "{@prefix} &7Visit the &e/shop&7 to spend your Prestige Points and explore new upgrades!" to {_p}
    # Consider adding a specific command like /prestigeshop if it's a separate GUI.

# Command for admins to manage prestige (optional)
command /rcprestigeadmin <player> <text> <number>:
    permission: raceclicker.admin
    trigger:
        if arg-2 is "setlevel":
            set {player::%arg-1's uuid%::prestige-level} to arg-3
            send "{@prefix} &aSet %arg-1%'s prestige level to %arg-3%." to sender
        else if arg-2 is "addpoints":
            add arg-3 to {player::%arg-1's uuid%::prestige-points}
            send "{@prefix} &aAdded %arg-3% prestige points to %arg-1%." to sender
        else:
            send "{@prefix} &cUsage: /rcprestigeadmin <player> [setlevel|addpoints] <value>" to sender