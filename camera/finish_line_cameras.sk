# File: finish_line_cameras.sk
# Description: Cinematic finish line camera effects and transitions

options:
    prefix: &6&lRaceClicker &8Â»
    # Camera settings
    finish_line_distance: 10 blocks # Distance before finish line to trigger cinematic
    finish_line_duration: 5 seconds # Duration of finish line camera
    finish_line_zoom: 0.5 # Camera zoom factor
    finish_line_effect_duration: 2 seconds # Duration of finish line effects
    
# Variables:
# {player::%uuid%::in_finish_camera} = boolean (in finish line camera)
# {player::%uuid%::finish_camera_start_time} = timestamp (when finish camera started)
# {player::%uuid%::finish_camera_target} = location (target location)

# Function to check if player is near finish line
function isNearFinishLine(p: player) -> boolean:
    set {_uuid} to {_p}'s uuid
    set {_citizen_loc} to location of entity from uuid {player::%{_uuid}%::race_citizen_entity_id}
    set {_finish_region} to cuboid region from {tracks::%{player::%{_uuid}%::current_track_id}%::finish_region_loc1} to {tracks::%{player::%{_uuid}%::current_track_id}%::finish_region_loc2}
    return {_citizen_loc} is in {_finish_region}

# Function to start finish line camera
every 1 tick:
    loop all players:
        if {player::%loop-player's uuid%::in_race} is true:
            set {_p} to loop-player
            set {_uuid} to {_p}'s uuid
            
            if isNearFinishLine({_p}) is true:
                if {player::%{_uuid}%::in_finish_camera} is not true:
                    startFinishLineCamera({_p})
            else if {player::%{_uuid}%::in_finish_camera} is true:
                endFinishLineCamera({_p})

# Function to start finish line camera
function startFinishLineCamera(p: player):
    set {_uuid} to {_p}'s uuid
    set {player::%{_uuid}%::in_finish_camera} to true
    set {player::%{_uuid}%::finish_camera_start_time} to now
    
    # Get citizen location
    set {_citizen} to entity from uuid {player::%{_uuid}%::race_citizen_entity_id}
    set {_citizen_loc} to location of {_citizen}
    set {player::%{_uuid}%::finish_camera_target} to {_citizen_loc}
    
    # Start camera transition
    set camera location of {_p} to {_citizen_loc} add vector(0, 2, -5)
    set camera rotation of {_p} to look at {_citizen_loc}
    
    # Start zoom effect
    set {_zoom} to 1.0
    loop 20 times:
        set {_zoom} to {_zoom} - 0.025
        set camera zoom of {_p} to {_zoom}
        wait 1 tick
    
    # Play finish line effects
    spawn 20 of particle "happy_villager" at {_citizen_loc}
    play sound "minecraft:entity.firework_rocket.launch" to {_p} with volume 1 pitch 1.5
    
    # Send message
    send "{@prefix} &aApproaching Finish Line!" to {_p}

# Function to end finish line camera
function endFinishLineCamera(p: player):
    set {_uuid} to {_p}'s uuid
    
    # Reset camera
    set camera zoom of {_p} to 1.0
    set camera location of {_p} to location of {_p}
    set camera rotation of {_p} to look at location of {_p} add vector(0, 1, 0)
    
    # Reset variables
    set {player::%{_uuid}%::in_finish_camera} to false
    set {player::%{_uuid}%::finish_camera_start_time} to null
    set {player::%{_uuid}%::finish_camera_target} to null
    
    # Play finish sound
    play sound "minecraft:entity.player.levelup" to {_p} with volume 1 pitch 1.2

# Function to update finish line camera position
every 1 tick:
    loop all players:
        if {player::%loop-player's uuid%::in_finish_camera} is true:
            set {_p} to loop-player
            set {_uuid} to {_p}'s uuid
            
            # Get citizen location
            set {_citizen} to entity from uuid {player::%{_uuid}%::race_citizen_entity_id}
            set {_citizen_loc} to location of {_citizen}
            
            # Update camera position
            set camera location of {_p} to {_citizen_loc} add vector(0, 2, -5)
            set camera rotation of {_p} to look at {_citizen_loc}
            
            # Check if finish line duration has passed
            if {player::%{_uuid}%::finish_camera_start_time} is set:
                set {_duration} to now - {player::%{_uuid}%::finish_camera_start_time}
                if {_duration} >= {@finish_line_duration}:
                    endFinishLineCamera({_p})

# Function to add finish line effects
function addFinishLineEffects(p: player):
    set {_uuid} to {_p}'s uuid
    
    # Get citizen location
    set {_citizen} to entity from uuid {player::%{_uuid}%::race_citizen_entity_id}
    set {_citizen_loc} to location of {_citizen}
    
    # Spawn particle effects
    loop 50 times:
        set {_angle} to loop-number * (360 / 50)
        set {_offset} to vector(sin({_angle}), 0, cos({_angle})) multiply 2
        spawn particle "happy_villager" at {_citizen_loc} add {_offset}
    
    # Play celebration sounds
    play sound "minecraft:entity.player.levelup" to {_p} with volume 1 pitch 1.2
    play sound "minecraft:entity.experience_orb.pickup" to {_p} with volume 1 pitch 1.5
    
    # Show title
    send title "&6Race Complete!" to {_p} with subtitle "&eGreat Job!" for 3 seconds

# Function to check if finish line camera is active
function isFinishLineCameraActive(p: player) -> boolean:
    set {_uuid} to {_p}'s uuid
    return {player::%{_uuid}%::in_finish_camera} is true
