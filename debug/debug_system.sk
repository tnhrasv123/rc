# File: debug_system.sk
# Description: Debug system for Race Clicker

options:
    prefix: &6&lRaceClicker &8Â»
    debug_mode: false # Global debug mode
    debug_commands: true # Enable debug commands
    debug_log_file: "raceclicker_debug.log" # Debug log file path
    debug_log_level: "INFO" # Debug log level (INFO, WARN, ERROR)
    
# Variables:
# {player::%uuid%::debug_mode} = boolean (player's debug mode)
# {player::%uuid%::debug_target} = text (debug target entity/player)

# Function to enable debug mode
function enableDebugMode(p: player):
    set {_uuid} to {_p}'s uuid
    set {player::%{_uuid}%::debug_mode} to true
    set {player::%{_uuid}%::debug_target} to null
    send "{@prefix} &aDebug Mode Enabled!" to {_p}
    
    # Send debug commands list
    send "&eDebug Commands:" to {_p}
    send "&7- /debug toggle - Toggle debug mode" to {_p}
    send "&7- /debug target <player/entity> - Set debug target" to {_p}
    send "&7- /debug stats - Show debug statistics" to {_p}
    send "&7- /debug log <level> - Set log level" to {_p}

# Function to disable debug mode
function disableDebugMode(p: player):
    set {_uuid} to {_p}'s uuid
    delete {player::%{_uuid}%::debug_mode}
    delete {player::%{_uuid}%::debug_target}
    send "{@prefix} &cDebug Mode Disabled!" to {_p}

# Function to set debug target
function setDebugTarget(p: player, target: text):
    set {_uuid} to {_p}'s uuid
    set {player::%{_uuid}%::debug_target} to {_target}
    send "{@prefix} &aDebug Target Set: %{_target}%" to {_p}

# Function to get debug stats
function getDebugStats(p: player) :: text:
    set {_uuid} to {_p}'s uuid
    set {_stats} to "&6Debug Stats:\n"
    
    # Add player stats
    append "&ePlayer: &a%{_p}%\n" to {_stats}
    append "&eUUID: &a%{_uuid}%\n" to {_stats}
    append "&eClicks: &a%{player::%{_uuid}%::clicks}%\n" to {_stats}
    append "&eRace Status: &a%{player::%{_uuid}%::in_race}%\n" to {_stats}
    
    # Add camera stats
    append "&eCamera Mode: &a%{player::%{_uuid}%::camera_mode}%\n" to {_stats}
    
    # Add achievement stats
    set {_ach_count} to 0
    loop all keys of {achievements_list::*}:
        if {player::%{_uuid}%::achievements::%loop-value%} is true:
            add 1 to {_ach_count}
    append "&eAchievements: &a%{_ach_count}%/%{size of {achievements_list::*}}%\n" to {_stats}
    
    # Add prestige stats
    append "&ePrestige Level: &a%{player::%{_uuid}%::prestige_level}%\n" to {_stats}
    
    return {_stats}

# Function to log debug message
function logDebug(message: text, level: text):
    if {debug_mode} is true:
        set {_timestamp} to now in "yyyy-MM-dd HH:mm:ss"
        set {_log_message} to "[%{_timestamp}%] [%{level}%] %{message}%"
        
        # Write to log file
        append line {_log_message} to file {@debug_log_file}
        
        # Send to console if level is INFO or higher
        if {level} is "INFO" or {level} is "WARN" or {level} is "ERROR":
            send "{@prefix} %{_log_message}%" to console

# Command to toggle debug mode
command /debug toggle:
    permission: raceclicker.debug
    trigger:
        if {player::%player's uuid%::debug_mode} is true:
            disableDebugMode(player)
        else:
            enableDebugMode(player)

# Command to set debug target
command /debug target <text>:
    permission: raceclicker.debug
    trigger:
        setDebugTarget(player, arg-1)

# Command to show debug stats
command /debug stats:
    permission: raceclicker.debug
    trigger:
        send "{@prefix} %{getDebugStats(player)}%" to player

# Command to set log level
command /debug log <text>:
    permission: raceclicker.admin
    trigger:
        if arg-1 is "INFO" or arg-1 is "WARN" or arg-1 is "ERROR":
            set {@debug_log_level} to arg-1
            send "{@prefix} &aLog level set to %{arg-1}%" to player
        else:
            send "{@prefix} &cInvalid log level! Use: INFO, WARN, ERROR" to player

# Event handler for debug events
every 1 tick:
    loop all players:
        if {player::%loop-player's uuid%::debug_mode} is true:
            set {_p} to loop-player
            set {_uuid} to {_p}'s uuid
            
            # Log player stats
            if {@debug_log_level} is "INFO":
                set {_stats} to getDebugStats({_p})
                logDebug({_stats}, "INFO")
            
            # Check debug target
            if {player::%{_uuid}%::debug_target} is set:
                set {_target} to {player::%{_uuid}%::debug_target}
                if {_target} is not null:
                    # Log target stats
                    if {@debug_log_level} is "INFO":
                        set {_target_stats} to "&6Target Stats:\n"
                        append "&eTarget: &a%{_target}%\n" to {_target_stats}
                        logDebug({_target_stats}, "INFO")

# Function to get debug mode status
function isDebugModeEnabled(p: player) :: boolean:
    set {_uuid} to {_p}'s uuid
    return {player::%{_uuid}%::debug_mode} is true
