# File: event_system.sk
# Description: Event system for Race Clicker

options:
    prefix: &6&lRaceClicker &8Â»
    # Event settings
    event_start_time: 15 minutes # Time before event starts
    event_duration: 30 minutes # Duration of event
    event_cooldown: 1 hour # Cooldown between events
    
    # Event types
    event_types:
        - "Double Clicks"
        - "Speed Boost"
        - "Power Surge"
        - "Combo Multiplier"
        - "Achievement Bonus"
        - "Track Bonus"
        - "Race Bonus"
        - "Prestige Bonus"
        - "ClickCoin Bonus"
    
    # Event rewards
    event_rewards:
        clicks_multiplier: 2.0
        speed_multiplier: 1.5
        power_multiplier: 1.5
        combo_multiplier: 1.5
        achievement_multiplier: 2.0
        track_multiplier: 1.2
        race_multiplier: 1.2
        prestige_multiplier: 1.5
        clickcoins_multiplier: 2.0
    
    # Event chances
    event_chances:
        double_clicks: 20
        speed_boost: 15
        power_surge: 15
        combo_multiplier: 15
        achievement_bonus: 10
        track_bonus: 10
        race_bonus: 10
        prestige_bonus: 5
        clickcoin_bonus: 5

# Variables:
# {event::current_event} = text (current event type)
# {event::start_time} = timestamp (event start time)
# {event::end_time} = timestamp (event end time)
# {event::last_event} = timestamp (last event time)
# {player::%uuid%::event_points} = number (player's event points)

# Function to start event
every {@event_cooldown}:
    if now - {event::last_event} >= {@event_cooldown}:
        startEvent()

# Function to start event
function startEvent():
    # Choose random event
    set {_event} to random element of {@event_types::*}
    set {_chance} to random number between 1 and 100
    
    # Check event chance
    switch {_event}:
        case "Double Clicks":
            if {_chance} <= {@event_chances::double_clicks}:
                set {event::current_event} to "Double Clicks"
            break
        case "Speed Boost":
            if {_chance} <= {@event_chances::speed_boost}:
                set {event::current_event} to "Speed Boost"
            break
        case "Power Surge":
            if {_chance} <= {@event_chances::power_surge}:
                set {event::current_event} to "Power Surge"
            break
        case "Combo Multiplier":
            if {_chance} <= {@event_chances::combo_multiplier}:
                set {event::current_event} to "Combo Multiplier"
            break
        case "Achievement Bonus":
            if {_chance} <= {@event_chances::achievement_bonus}:
                set {event::current_event} to "Achievement Bonus"
            break
        case "Track Bonus":
            if {_chance} <= {@event_chances::track_bonus}:
                set {event::current_event} to "Track Bonus"
            break
        case "Race Bonus":
            if {_chance} <= {@event_chances::race_bonus}:
                set {event::current_event} to "Race Bonus"
            break
        case "Prestige Bonus":
            if {_chance} <= {@event_chances::prestige_bonus}:
                set {event::current_event} to "Prestige Bonus"
            break
        case "ClickCoin Bonus":
            if {_chance} <= {@event_chances::clickcoin_bonus}:
                set {event::current_event} to "ClickCoin Bonus"
            break

    # If no event selected, try again
    if {event::current_event} is not set:
        startEvent()
        return

    # Set event times
    set {event::start_time} to now + {@event_start_time}
    set {event::end_time} to {event::start_time} + {@event_duration}
    set {event::last_event} to now

    # Announce event
    broadcast "{@prefix} &6Event Alert: %{event::current_event}% event starting in %{@event_start_time}%!" to all players
    broadcast "{@prefix} &6Duration: %{@event_duration}%" to all players
    broadcast "{@prefix} &6Rewards: %{event::current_event}% bonus!" to all players

# Function to apply event bonus
every 1 tick:
    if {event::current_event} is set:
        if now >= {event::start_time} and now <= {event::end_time}:
            loop all players:
                set {_p} to loop-player
                set {_uuid} to {_p}'s uuid
                
                # Apply event bonus
                switch {event::current_event}:
                    case "Double Clicks":
                        set {player::%{_uuid}%::click_multiplier} to {@event_rewards::clicks_multiplier}
                        break
                    case "Speed Boost":
                        set {player::%{_uuid}%::speed_multiplier} to {@event_rewards::speed_multiplier}
                        break
                    case "Power Surge":
                        set {player::%{_uuid}%::power_multiplier} to {@event_rewards::power_multiplier}
                        break
                    case "Combo Multiplier":
                        set {player::%{_uuid}%::combo_multiplier} to {@event_rewards::combo_multiplier}
                        break
                    case "Achievement Bonus":
                        set {player::%{_uuid}%::achievement_multiplier} to {@event_rewards::achievement_multiplier}
                        break
                    case "Track Bonus":
                        set {player::%{_uuid}%::track_multiplier} to {@event_rewards::track_multiplier}
                        break
                    case "Race Bonus":
                        set {player::%{_uuid}%::race_multiplier} to {@event_rewards::race_multiplier}
                        break
                    case "Prestige Bonus":
                        set {player::%{_uuid}%::prestige_multiplier} to {@event_rewards::prestige_multiplier}
                        break
                    case "ClickCoin Bonus":
                        set {player::%{_uuid}%::clickcoins_multiplier} to {@event_rewards::clickcoins_multiplier}
                        break

# Function to end event
function endEvent():
    if {event::current_event} is set:
        broadcast "{@prefix} &6Event Alert: %{event::current_event}% event has ended!" to all players
        
        # Reset all multipliers
        loop all players:
            set {_uuid} to loop-player's uuid
            set {player::%{_uuid}%::click_multiplier} to 1
            set {player::%{_uuid}%::speed_multiplier} to 1
            set {player::%{_uuid}%::power_multiplier} to 1
            set {player::%{_uuid}%::combo_multiplier} to 1
            set {player::%{_uuid}%::achievement_multiplier} to 1
            set {player::%{_uuid}%::track_multiplier} to 1
            set {player::%{_uuid}%::race_multiplier} to 1
            set {player::%{_uuid}%::prestige_multiplier} to 1
            set {player::%{_uuid}%::clickcoins_multiplier} to 1
        
        # Reset event
        delete {event::current_event}
        delete {event::start_time}
        delete {event::end_time}

# Function to get event status
function getEventStatus() :: text:
    if {event::current_event} is not set:
        return "&cNo event active!"
    
    set {_time_left} to {event::end_time} - now
    set {_status} to "&6Event: %{event::current_event}%\n"
    append "&eTime Left: &a%{_time_left}%\n" to {_status}
    append "&eRewards: &a%{event::current_event}% bonus" to {_status}
    return {_status}

# Command to view event status
command /event:
    trigger:
        send "{@prefix} %{getEventStatus()}%" to player

# Function to give event points
function giveEventPoints(p: player, amount: number):
    set {_uuid} to {_p}'s uuid
    add {_amount} to {player::%{_uuid}%::event_points}
    
    # Check for event achievements
    checkEventAchievements({_p})

# Function to check event achievements
function checkEventAchievements(p: player):
    set {_uuid} to {_p}'s uuid
    set {_points} to {player::%{_uuid}%::event_points} ? 0
    
    # Event points achievements
    loop [1000, 5000, 10000, 50000, 100000]:
        if {_points} >= loop-value:
            if {player::%{_uuid}%::achievements::event_points_%{loop-value}%} is not true:
                unlockAchievement({_p}, "Event Master %{loop-value}%")

# Function to unlock achievement
function unlockAchievement(p: player, achievement: text):
    set {_uuid} to {_p}'s uuid
    set {player::%{_uuid}%::achievements::%{achievement.lower}%} to true
    
    # Give achievement reward
    giveAchievementReward({_p}, achievement)
    
    # Send achievement message
    send "{@prefix} &aUnlocked Achievement: %{achievement}%" to {_p}
    broadcast "{@prefix} &6%{_p}% unlocked achievement: %{achievement}%" to players with permission "raceclicker.achievements"

# Function to give achievement reward
function giveAchievementReward(p: player, achievement: text):
    set {_uuid} to {_p}'s uuid
    
    # Base reward
    set {_reward} to 100
    
    # Special rewards
    switch achievement:
        case "Event Master 100000":
            set {_reward} to 500
            break
        case "Event Master 50000":
            set {_reward} to 300
            break
        case "Event Master 10000":
            set {_reward} to 200
            break
    
    # Add reward
    add {_reward} to {player::%{_uuid}%::clickcoins}
    send "{@prefix} &aEarned %{@achievement_bonus}% ClickCoins for achievement!" to {_p}

# Event-specific effects
on click:
    if {event::current_event} is "Double Clicks":
        set {_p} to player
        set {_uuid} to {_p}'s uuid
        
        # Double click effect
        set {_click_power} to {player::%{_uuid}%::click_power} * {@event_rewards::clicks_multiplier}
        set {player::%{_uuid}%::click_power} to {_click_power}
        
        # Particle effect
        spawn particle "minecraft:happy_villager" at {_p}'s location

on race finish:
    if {event::current_event} is "Race Bonus":
        set {_p} to player
        set {_uuid} to {_p}'s uuid
        
        # Race bonus
        add {@event_rewards::race_multiplier} to {player::%{_uuid}%::races_won}
        
        # Give event points
        giveEventPoints({_p}, 100)

on track completion:
    if {event::current_event} is "Track Bonus":
        set {_p} to player
        set {_uuid} to {_p}'s uuid
        
        # Track bonus
        add {@event_rewards::track_multiplier} to {player::%{_uuid}%::tracks_completed}
        
        # Give event points
        giveEventPoints({_p}, 50)

on achievement unlock:
    if {event::current_event} is "Achievement Bonus":
        set {_p} to player
        set {_uuid} to {_p}'s uuid
        
        # Achievement bonus
        set {player::%{_uuid}%::achievement_multiplier} to {@event_rewards::achievement_multiplier}
        
        # Give event points
        giveEventPoints({_p}, 25)

# Event leaderboard
every 5 minutes:
    if {event::current_event} is set:
        set {_leaderboard} to []
        
        # Get top players
        loop all players sorted by {player::%{_uuid}%::event_points} descending:
            if size of {_leaderboard} >= 5:
                break
            set {_p} to loop-value
            set {_uuid} to {_p}'s uuid
            add "&e%{_p}%: &a%{player::%{_uuid}%::event_points}%" to {_leaderboard}
        
        # Broadcast leaderboard
        broadcast "{@prefix} &6Top Event Players:" to all players
        loop {_leaderboard}:
            broadcast "&7- %{loop-value}%" to all players
