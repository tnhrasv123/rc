# File: stats_tracking.sk
# Description: Statistics tracking system for Race Clicker

options:
    prefix: &6&lRaceClicker &8Â»
    # Stats settings
    stats_update_interval: 1 minute # How often to update stats
    leaderboard_size: 10 # Size of leaderboards
    
    # Achievement thresholds
    clicks_achievement_thresholds: [1000, 10000, 100000, 1000000, 10000000]
    races_achievement_thresholds: [1, 10, 50, 100, 500]
    tracks_achievement_thresholds: [1, 5, 10, 25, 50]
    achievements_achievement_thresholds: [1, 5, 10, 25, 50]
    
    # Stat categories
    stat_categories:
        - "Clicks"
        - "Races Won"
        - "Tracks Completed"
        - "Achievements"
        - "Prestige"
        - "ClickCoins"
        - "Combo"
        - "Accuracy"
        - "Speed"
        - "Power"

# Variables:
# {player::%uuid%::stats::*} = number (player's stats)
# {leaderboard::%category%::*} = text (list of leaderboard entries)
# {player::%uuid%::last_stats_update} = timestamp (last stats update time)

# Function to update stats
every {@stats_update_interval}:
    loop all players:
        set {_p} to loop-player
        set {_uuid} to {_p}'s uuid
        
        # Update stats
        updatePlayerStats({_p})
        
        # Update leaderboards
        updateLeaderboards()
        
        # Check achievements
        checkAchievements({_p})

# Function to update player stats
function updatePlayerStats(p: player):
    set {_uuid} to {_p}'s uuid
    
    # Update basic stats
    if {player::%{_uuid}%::clicks} is set:
        add {player::%{_uuid}%::clicks} to {player::%{_uuid}%::stats::clicks}
        set {player::%{_uuid}%::clicks} to 0
    
    if {player::%{_uuid}%::races_won} is set:
        add {player::%{_uuid}%::races_won} to {player::%{_uuid}%::stats::races_won}
    
    if {player::%{_uuid}%::tracks_completed} is set:
        add {player::%{_uuid}%::tracks_completed} to {player::%{_uuid}%::stats::tracks_completed}
    
    # Update advanced stats
    set {player::%{_uuid}%::stats::max_combo} to {player::%{_uuid}%::max_combo} ? 0
    set {player::%{_uuid}%::stats::accuracy} to {player::%{_uuid}%::accuracy} ? 0
    set {player::%{_uuid}%::stats::speed} to {player::%{_uuid}%::speed} ? 0
    set {player::%{_uuid}%::stats::power} to {player::%{_uuid}%::power} ? 0
    
    # Update prestige stats
    set {player::%{_uuid}%::stats::prestige} to {player::%{_uuid}%::prestige_level} ? 0
    
    # Update ClickCoins
    set {player::%{_uuid}%::stats::clickcoins} to {player::%{_uuid}%::clickcoins} ? 0

# Function to update leaderboards
function updateLeaderboards():
    loop {@stat_categories::*}:
        set {_category} to loop-value
        set {_leaderboard} to []
        
        # Get top players
        set {_players} to all players sorted by {player::%{_uuid}%::stats::%{_category}%} descending
        loop {_players}:
            if size of {_leaderboard} >= {@leaderboard_size}:
                break
            set {_p} to loop-value
            set {_uuid} to {_p}'s uuid
            add "&e%{_p}%: &a%{player::%{_uuid}%::stats::%{_category}%}" to {_leaderboard}
        
        # Update leaderboard
        set {leaderboard::%{_category}%::*} to {_leaderboard}

# Function to check achievements
function checkAchievements(p: player):
    set {_uuid} to {_p}'s uuid
    
    # Check click achievements
    loop {@clicks_achievement_thresholds::*}:
        if {player::%{_uuid}%::stats::clicks} >= loop-value:
            if {player::%{_uuid}%::achievements::clicks_%{loop-value}%} is not true:
                unlockAchievement({_p}, "Click Master %{loop-value}%")
    
    # Check race achievements
    loop {@races_achievement_thresholds::*}:
        if {player::%{_uuid}%::stats::races_won} >= loop-value:
            if {player::%{_uuid}%::achievements::races_%{loop-value}%} is not true:
                unlockAchievement({_p}, "Race Winner %{loop-value}%")
    
    # Check track achievements
    loop {@tracks_achievement_thresholds::*}:
        if {player::%{_uuid}%::stats::tracks_completed} >= loop-value:
            if {player::%{_uuid}%::achievements::tracks_%{loop-value}%} is not true:
                unlockAchievement({_p}, "Track Master %{loop-value}%")
    
    # Check achievement achievements
    set {_ach_count} to 0
    loop all keys of {achievements_list::*}:
        if {player::%{_uuid}%::achievements::%loop-value%} is true:
            add 1 to {_ach_count}
    
    loop {@achievements_achievement_thresholds::*}:
        if {_ach_count} >= loop-value:
            if {player::%{_uuid}%::achievements::achievements_%{loop-value}%} is not true:
                unlockAchievement({_p}, "Achievement Master %{loop-value}%")

# Function to unlock achievement
function unlockAchievement(p: player, achievement: text):
    set {_uuid} to {_p}'s uuid
    set {player::%{_uuid}%::achievements::%{achievement.lower}%} to true
    
    # Give achievement reward
    giveAchievementReward({_p}, achievement)
    
    # Send achievement message
    send "{@prefix} &aUnlocked Achievement: %{achievement}%" to {_p}
    broadcast "{@prefix} &6%{_p}% unlocked achievement: %{achievement}%" to players with permission "raceclicker.achievements"

# Function to give achievement reward
function giveAchievementReward(p: player, achievement: text):
    set {_uuid} to {_p}'s uuid
    
    # Base reward
    set {_reward} to 100
    
    # Special rewards
    switch achievement:
        case "Click Master 1000000":
            set {_reward} to 500
            break
        case "Race Winner 100":
            set {_reward} to 250
            break
        case "Track Master 50":
            set {_reward} to 300
            break
        case "Achievement Master 50":
            set {_reward} to 1000
            break
    
    # Add reward
    add {_reward} to {player::%{_uuid}%::clickcoins}
    send "{@prefix} &aEarned %{@achievement_bonus}% ClickCoins for achievement!" to {_p}

# Function to get player stats
function getPlayerStats(p: player) :: text:
    set {_uuid} to {_p}'s uuid
    set {_stats} to "&6Player Stats:\n"
    
    # Basic stats
    append "&eClicks: &a%{player::%{_uuid}%::stats::clicks}%\n" to {_stats}
    append "&eRaces Won: &a%{player::%{_uuid}%::stats::races_won}%\n" to {_stats}
    append "&eTracks Completed: &a%{player::%{_uuid}%::stats::tracks_completed}%\n" to {_stats}
    
    # Advanced stats
    append "&eMax Combo: &a%{player::%{_uuid}%::stats::max_combo}%\n" to {_stats}
    append "&eAccuracy: &a%{player::%{_uuid}%::stats::accuracy}%\n" to {_stats}
    append "&eSpeed: &a%{player::%{_uuid}%::stats::speed}%\n" to {_stats}
    append "&ePower: &a%{player::%{_uuid}%::stats::power}%\n" to {_stats}
    
    # Prestige and ClickCoins
    append "&ePrestige: &a%{player::%{_uuid}%::stats::prestige}%\n" to {_stats}
    append "&eClickCoins: &a%{player::%{_uuid}%::stats::clickcoins}%\n" to {_stats}
    
    return {_stats}

# Command to view stats
command /stats:
    trigger:
        send "{@prefix} %{getPlayerStats(player)}%" to player

# Command to view leaderboard
command /leaderboard <text>:
    trigger:
        set {_category} to arg-1
        if {_category} is not in {@stat_categories::*}:
            send "{@prefix} &cInvalid category! Use: %{@stat_categories::*}%" to player
            return
        
        send "{@prefix} &6Top %{@leaderboard_size}% %{_category}%:" to player
        loop {leaderboard::%{_category}%::*}:
            send "&7- %{loop-value}%" to player

# Command to view achievements
command /achievements:
    trigger:
        set {_uuid} to player's uuid
        set {_ach_count} to 0
        set {_ach_list} to []
        
        # Get unlocked achievements
        loop all keys of {achievements_list::*}:
            if {player::%{_uuid}%::achievements::%loop-value%} is true:
                add 1 to {_ach_count}
                add "&e- %{loop-value}%" to {_ach_list}
        
        # Send achievements
        send "{@prefix} &6Your Achievements (%{_ach_count}%/%{size of {achievements_list::*}}%):" to player
        loop {_ach_list}:
            send loop-value to player
