# File: admin.sk
# Path: race-clicker/admin/admin.sk
# Description: Admin tools for Race Clicker Skript

options:
    prefix: &6&lRaceClicker &c&lAdmin &8Â» # Admin-specific prefix
    admin_permission: "raceclicker.admin" # Permission node for admin commands

# --- Phase 1: Fix and Complete Core Systems ---
# - TODO: Add commands to reset player data (specific variables or all)
# - TODO: Add commands to modify player variables (clicks, speed, etc.)

# --- Phase 7: Performance and Anti-Cheat ---
# Implement Anti-Cheat Measures
# - TODO: Command to view player's click rate or other suspicious metrics
# - TODO: Command to temporarily ban or kick players based on cheat detection (manual override)
# Optimize Performance
# - TODO: Command to view server performance metrics related to the Skript (TPS, variable counts - if possible)
# - TODO: Command to clear specific caches if implemented (e.g., leaderboard cache)

# --- Phase 8: Content and Progression Systems ---
# Prestige System
# - TODO: Integrate with prestige.sk admin commands (already has /rcprestigeadmin)
# Achievement System
# - TODO: Command to grant/revoke specific achievements for a player
# - TODO: Command to reset all achievements for a player

# --- Phase 6: Multiplayer Features (Tournaments) ---
# - TODO: Integrate with tournaments.sk admin commands (already has /rctournamentadmin)

# --- General Admin Commands ---

command /rcadmin [<text>] [<text>] [<player>] [<text>]:
    permission: {@admin_permission}
    permission message: &cYou do not have permission to use RaceClicker admin commands.
    trigger:
        if arg-1 is not set:
            send "{@prefix} &7Available commands:"
            send "&e/rcadmin reload &7- Reloads RaceClicker Skripts (requires Skript's reload functionality)."
            send "&e/rcadmin set <variable> <player> <value> &7- Sets a player's variable (e.g., clicks, speedlevel)."
            send "&e/rcadmin get <variable> <player> &7- Gets a player's variable value."
            send "&e/rcadmin resetdata <player> [confirm] &7- Resets all RaceClicker data for a player."
            send "&e/rcadmin giveclicks <player> <amount> &7- Gives a player a specified amount of clicks."
            # Add more help lines as commands are implemented
            stop

        # Reload command (conceptual - Skript handles its own reloads)
        if arg-1 is "reload":
            send "{@prefix} &7Attempting to reload RaceClicker Skripts..."
            # This typically requires a full Skript reload, e.g., /sk reload all or /sk reload race-clicker
            # Direct Skript reloading from within another Skript is not standard.
            # Advise admin to use Skript's own reload commands.
            send "{@prefix} &ePlease use &b/sk reload all &eor &b/sk reload <script_name>&e for full effect."
            stop

        # Set player variable
        if arg-1 is "set":
            if arg-2 is not set or arg-3 is not set or arg-4 is not set:
                send "{@prefix} &cUsage: /rcadmin set <variable_name> <player> <value>"
                send "{@prefix} &7Example: /rcadmin set clicks Notch 1000"
                send "{@prefix} &7Valid variables: clicks, speedlevel, autoclicklevel, prestigelevel, raceswon, etc."
                stop
            set {_variable_name} to lowercased arg-2
            set {_target_player} to arg-3
            # Attempt to parse value as number, but some might be text
            set {_value_text} to arg-4
            set {_value_num} to {_value_text} parsed as number

            send "{@prefix} &7Attempting to set &e%{_variable_name}%&7 for player &b%{_target_player}%&7 to &a%{_value_text}%&7..."
            # This requires knowing the exact variable names used in data.sk
            # Example for 'clicks':
            if {_variable_name} is "clicks":
                if {_value_num} is not set:
                    send "{@prefix} &cInvalid number for clicks: %{_value_text}%"
                    stop
                set {player::%{_target_player}'s uuid%::clicks} to {_value_num}
                send "{@prefix} &aSuccessfully set clicks for %{_target_player}% to %{_value_num}%."
            else if {_variable_name} is "speedlevel":
                if {_value_num} is not set:
                    send "{@prefix} &cInvalid number for speedlevel: %{_value_text}%"
                    stop
                set {player::%{_target_player}'s uuid%::speed_level} to {_value_num}
                send "{@prefix} &aSuccessfully set speed level for %{_target_player}% to %{_value_num}%."
            # Add more 'else if' for other variables like autoclicklevel, prestigelevel, raceswon
            # else if {_variable_name} is "autoclicklevel": ...
            # else if {_variable_name} is "prestigelevel": ...
            # else if {_variable_name} is "raceswon": ...
            else:
                send "{@prefix} &cUnknown or unhandled variable: &e%{_variable_name}%&c. Check variable name."
            stop

        # Get player variable
        if arg-1 is "get":
            if arg-2 is not set or arg-3 is not set:
                send "{@prefix} &cUsage: /rcadmin get <variable_name> <player>"
                stop
            set {_variable_name} to lowercased arg-2
            set {_target_player} to arg-3
            set {_player_uuid} to uuid of {_target_player}

            if {_player_uuid} is not set:
                send "{@prefix} &cPlayer %{_target_player}% not found or never joined."
                stop

            send "{@prefix} &7Fetching &e%{_variable_name}%&7 for player &b%{_target_player}%&7..."
            if {_variable_name} is "clicks":
                send "{@prefix} &b%{_target_player}%&7's clicks: &a%{player::%{_player_uuid}%::clicks ? 0}%"
            else if {_variable_name} is "speedlevel":
                send "{@prefix} &b%{_target_player}%&7's speed level: &a%{player::%{_player_uuid}%::speed_level ? 0}%"
            # Add more 'else if' for other variables
            else:
                send "{@prefix} &cUnknown or unhandled variable: &e%{_variable_name}%&c. Check variable name."
            stop

        # Reset player data
        if arg-1 is "resetdata":
            if arg-2 is not set:
                send "{@prefix} &cUsage: /rcadmin resetdata <player> [confirm]"
                stop
            set {_target_player} to arg-2
            set {_player_uuid} to uuid of {_target_player}

            if {_player_uuid} is not set:
                send "{@prefix} &cPlayer %{_target_player}% not found or never joined."
                stop

            if arg-3 is not "confirm":
                send "{@prefix} &cWARNING: This will delete ALL RaceClicker data for %{_target_player}%."
                send "{@prefix} &cTo confirm, type: &e/rcadmin resetdata %{_target_player}% confirm"
                stop

            send "{@prefix} &7Resetting all data for player &b%{_target_player}%&7..."
            # Delete all known player variables. This needs to be comprehensive.
            delete {player::%{_player_uuid}%::clicks}
            delete {player::%{_player_uuid}%::speed_level}
            delete {player::%{_player_uuid}%::autoclicker_level}
            delete {player::%{_player_uuid}%::prestige_level}
            delete {player::%{_player_uuid}%::prestige_points}
            delete {player::%{_player_uuid}%::races_won}
            delete {player::%{_player_uuid}%::total_races_participated}
            # Delete achievement-related variables if any are player-specific and stored directly
            # loop all achievements:
            #    delete {player_achievements::%{_player_uuid}%::%loop-value%}
            # Delete any other custom variables
            # ... (add more as needed)

            # Re-initialize with default values (similar to on join in data.sk)
            # This part is crucial to ensure the player can continue playing without errors.
            # It's better to call a function from data.sk if one exists for initializing new player data.
            # For now, manually set defaults:
            set {player::%{_player_uuid}%::clicks} to 0
            set {player::%{_player_uuid}%::speed_level} to 1
            set {player::%{_player_uuid}%::autoclicker_level} to 0
            set {player::%{_player_uuid}%::prestige_level} to 0
            set {player::%{_player_uuid}%::prestige_points} to 0
            set {player::%{_player_uuid}%::races_won} to 0
            set {player::%{_player_uuid}%::total_races_participated} to 0

            send "{@prefix} &aSuccessfully reset all RaceClicker data for &b%{_target_player}%&a and initialized defaults."
            if {_target_player} is online:
                send "{@prefix} &eYour RaceClicker data has been reset by an administrator." to {_target_player}
            stop

        # Give clicks
        if arg-1 is "giveclicks":
            if arg-2 is not set or arg-3 is not set:
                send "{@prefix} &cUsage: /rcadmin giveclicks <player> <amount>"
                stop
            set {_target_player} to arg-2
            set {_amount} to arg-3 parsed as number
            set {_player_uuid} to uuid of {_target_player}

            if {_player_uuid} is not set:
                send "{@prefix} &cPlayer %{_target_player}% not found or never joined."
                stop
            if {_amount} is not set or {_amount} <= 0:
                send "{@prefix} &cInvalid amount: %arg-3%"
                stop

            add {_amount} to {player::%{_player_uuid}%::clicks}
            send "{@prefix} &aGave &e%{_amount}% clicks &ato &b%{_target_player}%&a. New total: &e%{player::%{_player_uuid}%::clicks}%".
            if {_target_player} is online:
                send "{@prefix} &aYou have received &e%{_amount}% clicks &afrom an administrator." to {_target_player}
            stop

        send "{@prefix} &cUnknown command. Type &e/rcadmin &cfor help."

# TODO: Add more specific admin commands as per the plan
# - Achievement management: /rcadmin achievement <grant|revoke|reset> <player> [achievement_id]
# - Anti-cheat related: /rcadmin checkclicks <player>, /rcadmin rckick <player> [reason]
# - Performance: /rcadmin perfstats, /rcadmin clearcache <cache_name>

# Placeholder for a function to be called from data.sk to initialize a player
# This avoids duplicating the default value logic.
# function initializePlayerDataAdmin(p: player):
#    # Call the function from data.sk, e.g.:
#    # initializeNewPlayerData({_p}) # Assuming such a function exists in data.sk
#    send debug "[Admin] initializePlayerDataAdmin called for %{_p}% (should call data.sk function)"