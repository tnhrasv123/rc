# File: achievement_system.sk
# Description: Achievement system for Race Clicker

options:
    prefix: &6&lRaceClicker &8Â»
    # Achievement categories
    achievement_categories:
        - "Racing"
        - "Clicking"
        - "Social"
        - "Guild"
        - "Economy"
        - "Collection"
        - "Special"
    
    # Achievement reward types
    achievement_rewards:
        - "ClickCoins"
        - "Speed Boost"
        - "Power Boost"
        - "Prestige Points"
        - "Title"
        - "Custom Item"
    
    # Achievement levels
    achievement_levels:
        - "Bronze"
        - "Silver"
        - "Gold"
        - "Platinum"
        - "Diamond"

# Variables:
# {player::%uuid%::achievements::*} = text (unlocked achievements)
# {player::%uuid%::achievement_progress::*} = number (achievement progress)
# {player::%uuid%::achievement_points} = number (total achievement points)
# {achievement::%id%::name} = text (achievement name)
# {achievement::%id%::description} = text (achievement description)
# {achievement::%id%::category} = text (achievement category)
# {achievement::%id%::reward} = text (achievement reward)
# {achievement::%id%::points} = number (achievement points)
# {achievement::%id%::level} = text (achievement level)
# {achievement::%id%::progress_required} = number (required progress)

# Function to initialize achievements
on join:
    set {_p} to player
    set {_uuid} to {_p}'s uuid
    
    # Initialize achievement variables
    if not {player::%{_uuid}%::achievements::*} is set:
        set {player::%{_uuid}%::achievements::*} to []
    if not {player::%{_uuid}%::achievement_progress::*} is set:
        set {player::%{_uuid}%::achievement_progress::*} to []
    if not {player::%{_uuid}%::achievement_points} is set:
        set {player::%{_uuid}%::achievement_points} to 0

# Function to initialize achievements
function initializeAchievements():
    # Clear existing achievements
    clear {achievement::*}
    
    # Racing Achievements
    registerAchievement("first_race", "First Race", "Complete your first race", "Racing", "Bronze", 10, "ClickCoins", 1)
    registerAchievement("race_winner", "Race Winner", "Win your first race", "Racing", "Silver", 25, "ClickCoins", 1)
    registerAchievement("track_master", "Track Master", "Complete all tracks", "Racing", "Gold", 50, "ClickCoins", 10)
    registerAchievement("speed_demon", "Speed Demon", "Reach 1000 speed multiplier", "Racing", "Platinum", 100, "Speed Boost", 1000)
    
    # Clicking Achievements
    registerAchievement("click_master", "Click Master", "Reach 1,000,000 clicks", "Clicking", "Silver", 50, "ClickCoins", 1000)
    registerAchievement("combo_king", "Combo King", "Achieve 1000x combo multiplier", "Clicking", "Gold", 75, "ClickCoins", 2500)
    registerAchievement("accuracy_perfect", "Perfect Accuracy", "Achieve 100% accuracy", "Clicking", "Diamond", 150, "Power Boost", 1500)
    
    # Social Achievements
    registerAchievement("friendship", "Friendship", "Add 10 friends", "Social", "Bronze", 20, "ClickCoins", 500)
    registerAchievement("guild_master", "Guild Master", "Create a guild", "Social", "Silver", 30, "ClickCoins", 1000)
    registerAchievement("guild_hero", "Guild Hero", "Reach guild rank 10", "Social", "Gold", 100, "Prestige Points", 50)
    
    # Economy Achievements
    registerAchievement("rich_man", "Rich Man", "Reach 1,000,000 ClickCoins", "Economy", "Gold", 100, "ClickCoins", 5000)
    registerAchievement("market_master", "Market Master", "Complete 100 market transactions", "Economy", "Platinum", 150, "ClickCoins", 10000)
    registerAchievement("investor", "Investor", "Reach 1000% market profit", "Economy", "Diamond", 200, "Prestige Points", 100)

# Function to register achievement
function registerAchievement(id: text, name: text, description: text, category: text, level: text, points: number, reward: text, reward_amount: number):
    set {achievement::%{_id}%::name} to {_name}
    set {achievement::%{_id}%::description} to {_description}
    set {achievement::%{_id}%::category} to {_category}
    set {achievement::%{_id}%::level} to {_level}
    set {achievement::%{_id}%::points} to {_points}
    set {achievement::%{_id}%::reward} to {_reward}
    set {achievement::%{_id}%::reward_amount} to {_reward_amount}
    set {achievement::%{_id}%::progress_required} to 1

# Function to check achievement progress
function checkAchievement(p: player, achievement_id: text):
    set {_uuid} to {_p}'s uuid
    
    # Check if achievement is already unlocked
    if not {_achievement_id} is in {player::%{_uuid}%::achievements::*}:
        return
        
    # Check progress
    if {player::%{_uuid}%::achievement_progress::%{_achievement_id}%} >= {achievement::%{_achievement_id}%::progress_required}:
        # Unlock achievement
        add {_achievement_id} to {player::%{_uuid}%::achievements::*}
        add {achievement::%{_achievement_id}%::points} to {player::%{_uuid}%::achievement_points}
        
        # Give reward
        switch {achievement::%{_achievement_id}%::reward}:
            case "ClickCoins":
                add {achievement::%{_achievement_id}%::reward_amount} to {player::%{_uuid}%::clickcoins}
                break
            case "Speed Boost":
                set {player::%{_uuid}%::speed_boost} to true
                break
            case "Power Boost":
                set {player::%{_uuid}%::power_boost} to true
                break
            case "Prestige Points":
                add {achievement::%{_achievement_id}%::reward_amount} to {player::%{_uuid}%::prestige_points}
                break
            case "Title":
                set {player::%{_uuid}%::title} to {achievement::%{_achievement_id}%::reward_amount}
                break
        
        # Notify player
        send "{@prefix} &6Achievement Unlocked: %{achievement::%{_achievement_id}%::name}%" to {_p}
        send "{@prefix} &eDescription: %{achievement::%{_achievement_id}%::description}%" to {_p}
        send "{@prefix} &aReward: %{achievement::%{_achievement_id}%::reward_amount}% %{achievement::%{_achievement_id}%::reward}%" to {_p}
        
        # Broadcast achievement
        broadcast "{@prefix} &6%{_p}% unlocked achievement: %{achievement::%{_achievement_id}%::name}%" to players with permission "raceclicker.achievements.view"

# Function to update achievement progress
function updateAchievementProgress(p: player, achievement_id: text, amount: number):
    set {_uuid} to {_p}'s uuid
    
    # Check if achievement exists
    if {achievement::%{_achievement_id}%::name} is not set:
        return
        
    # Update progress
    if {player::%{_uuid}%::achievement_progress::%{_achievement_id}%} is not set:
        set {player::%{_uuid}%::achievement_progress::%{_achievement_id}%} to {_amount}
    else:
        add {_amount} to {player::%{_uuid}%::achievement_progress::%{_achievement_id}%}
        
    # Check if achievement is unlocked
    checkAchievement({_p}, {_achievement_id})

# Achievement triggers
# TODO: These are custom events that need to be called from other scripts
# on race completion:
#     set {_p} to player
#     set {_uuid} to {_p}'s uuid
#     
#     # Update racing achievements
#     updateAchievementProgress({_p}, "first_race", 1)
#     updateAchievementProgress({_p}, "race_winner", 1)
#     updateAchievementProgress({_p}, "track_master", 1)
#     updateAchievementProgress({_p}, "speed_demon", {player::%{_uuid}%::speed_multiplier})

on click:
    set {_p} to player
    set {_uuid} to {_p}'s uuid
    
    # Update clicking achievements
    updateAchievementProgress({_p}, "click_master", 1)
    updateAchievementProgress({_p}, "combo_king", {player::%{_uuid}%::combo_multiplier})
    updateAchievementProgress({_p}, "accuracy_perfect", {player::%{_uuid}%::accuracy})

# TODO: These are custom events that need to be called from other scripts
# on market transaction:
#     set {_p} to player
#     set {_uuid} to {_p}'s uuid
#     
#     # Update economy achievements
#     updateAchievementProgress({_p}, "rich_man", 1)
#     updateAchievementProgress({_p}, "market_master", 1)
#     updateAchievementProgress({_p}, "investor", 1)

# Achievement commands
command /achievements:
    permission: raceclicker.achievements.view
    trigger:
        set {_p} to player
        set {_uuid} to {_p}'s uuid
        
        # Get unlocked achievements
        set {_unlocked} to "&6Achievements Unlocked:\n"
        loop {player::%{_uuid}%::achievements::*}:
            set {_achievement_id} to loop-value
            append "&7- %{achievement::%{_achievement_id}%::name}% &8(&6%{achievement::%{_achievement_id}%::level}%&8)\n" to {_unlocked}
            
        # Get progress
        set {_progress} to "&6Achievement Progress:\n"
        loop all achievements:
            set {_achievement_id} to loop-key
            if {_achievement_id} is not in {player::%{_uuid}%::achievements::*}:
                set {_current} to {player::%{_uuid}%::achievement_progress::%{_achievement_id}%} ? 0
                set {_required} to {achievement::%{_achievement_id}%::progress_required}
                append "&7- %{achievement::%{_achievement_id}%::name}%: %{_current}%/%{_required}%\n" to {_progress}
                
        # Send info
        send "{@prefix} %{_unlocked}%" to {_p}
        send "{@prefix} %{_progress}%" to {_p}

command /achievementinfo <text>:
    permission: raceclicker.achievements.view
    trigger:
        set {_p} to player
        set {_uuid} to {_p}'s uuid
        
        # Get achievement info
        set {_achievement_id} to arg-1
        if not {achievement::%{_achievement_id}%::name} is set:
            send "{@prefix} &cAchievement not found!" to {_p}
            return
            
        # Get achievement details
        set {_name} to {achievement::%{_achievement_id}%::name}
        set {_description} to {achievement::%{_achievement_id}%::description}
        set {_category} to {achievement::%{_achievement_id}%::category}
        set {_level} to {achievement::%{_achievement_id}%::level}
        set {_points} to {achievement::%{_achievement_id}%::points}
        set {_reward} to {achievement::%{_achievement_id}%::reward}
        set {_reward_amount} to {achievement::%{_achievement_id}%::reward_amount}
        
        # Get player progress
        if not {player::%{_uuid}%::achievement_progress::%{_achievement_id}%} is set:
            set {player::%{_uuid}%::achievement_progress::%{_achievement_id}%} to 0
        set {_progress} to {player::%{_uuid}%::achievement_progress::%{_achievement_id}%}
        
        # Send achievement info
        send "{@prefix} &6Achievement Info:" to {_p}
        send "{@prefix} &eName: &a%{_name}%" to {_p}
        send "{@prefix} &eCategory: &a%{_category}%" to {_p}
        send "{@prefix} &eLevel: &a%{_level}%" to {_p}
        send "{@prefix} &eDescription: &a%{_description}%" to {_p}
        send "{@prefix} &ePoints: &a%{_points}%" to {_p}
        send "{@prefix} &eReward: &a%{_reward}%: %{_reward_amount}%" to {_p}
        send "{@prefix} &eProgress: &a%{_progress}%" to {_p}
