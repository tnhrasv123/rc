# File: market_system.sk
# Description: Player-to-player market system for Race Clicker

options:
    prefix: &6&lRaceClicker &8Â»
    # Market settings
    market_refresh_time: 10 minutes
    market_fee: 0.1 # 10% market fee
    market_max_listings: 100
    market_max_duration: 24 hours
    
    # Listing types
    listing_types:
        - "Speed Upgrades"
        - "Power Upgrades"
        - "Combo Upgrades"
        - "Accuracy Upgrades"
        - "Boosts"
        - "Prestige Tokens"
        - "Custom Items"
    
    # Market permissions
    market_permissions:
        list: "raceclicker.market.list"
        buy: "raceclicker.market.buy"
        manage: "raceclicker.market.manage"

# Variables:
# {market::listings::*} = text (market listings)
# {market::prices::*} = number (listing prices)
# {market::sellers::*} = text (seller uuids)
# {market::types::*} = text (listing types)
# {market::expiration::*} = timestamp (listing expiration)
# {market::quantity::*} = number (item quantity)
# {player::%uuid%::market_listings::*} = text (player's listings)

# Function to initialize market system
on join:
    set {_p} to player
    set {_uuid} to {_p}'s uuid
    
    # Initialize player's market listings
    if not {player::%{_uuid}%::market_listings::*} is set:
        set {player::%{_uuid}%::market_listings::*} to []

# Function to create market listing
command /marketlist <text> <number> <number>:
    permission: raceclicker.market.list
    trigger:
        set {_uuid} to player's uuid
        set {_item} to arg-1
        set {_price} to arg-2
        set {_quantity} to arg-3
        
        # Check if item is valid
        if not {_item} is in {@listing_types}:
            send "{@prefix} &cInvalid item type! Valid types: %{@listing_types}%" to player
            return
            
        # Check if player has enough items
        if {_item} is "Prestige Tokens":
            if {player::%{_uuid}%::prestige_tokens} < {_quantity}:
                send "{@prefix} &cYou don't have enough Prestige Tokens!" to player
                return
        else:
            if not {player::%{_uuid}%::%{_item}%} is set:
                set {player::%{_uuid}%::%{_item}%} to 0
            if {player::%{_uuid}%::%{_item}%} < {_quantity}:
                send "{@prefix} &cYou don't have enough %{_item}%!" to player
                return
                
        # Check if market is full
        if size of {market::listings::*} >= {@market_max_listings}:
            send "{@prefix} &cMarket is full! Please wait for listings to expire." to player
            return
            
        # Create listing
        set {_listing_id} to size of {market::listings::*} + 1
        add {_item} to {market::listings::*}
        add {_price} to {market::prices::*}
        add {_uuid} to {market::sellers::*}
        add {_item} to {market::types::*}
        add now + {@market_max_duration} to {market::expiration::*}
        add {_quantity} to {market::quantity::*}
        add {_listing_id} to {player::%{_uuid}%::market_listings::*}
        
        # Take items from player
        if {_item} is "Prestige Tokens":
            subtract {_quantity} from {player::%{_uuid}%::prestige_tokens}
        else:
            subtract {_quantity} from {player::%{_uuid}%::%{_item}%}
            
        # Notify players
        broadcast "{@prefix} &6%{player}% listed %{_quantity}% %{_item}% for %{_price}% ClickCoins!" to players with permission "raceclicker.market.view"
        send "{@prefix} &aSuccessfully listed %{_quantity}% %{_item}% for %{_price}% ClickCoins!" to player

# Function to buy market listing
command /marketbuy <number>:
    permission: raceclicker.market.buy
    trigger:
        set {_uuid} to player's uuid
        set {_listing_id} to arg-1 - 1
        
        # Check if listing exists
        if {_listing_id} >= size of {market::listings::*}:
            send "{@prefix} &cInvalid listing ID!" to player
            return
            
        # Get listing info
        set {_item} to {market::listings::%{_listing_id}%}
        set {_price} to {market::prices::%{_listing_id}%}
        set {_seller} to {market::sellers::%{_listing_id}%}
        set {_quantity} to {market::quantity::%{_listing_id}%}
        
        # Check if listing is expired
        if now > {market::expiration::%{_listing_id}%}:
            send "{@prefix} &cThis listing has expired!" to player
            return
            
        # Check if player can afford
        if {player::%{_uuid}%::clickcoins} < {_price}:
            send "{@prefix} &cYou don't have enough ClickCoins!" to player
            return
            
        # Deduct price and apply market fee
        set {_fee} to {_price} * {@market_fee}
        set {_final_price} to {_price} - {_fee}
        subtract {_final_price} from {player::%{_uuid}%::clickcoins}
        add {_final_price} to {player::%{_seller}%::clickcoins}
        
        # Give items to buyer
        if {_item} is "Prestige Tokens":
            add {_quantity} to {player::%{_uuid}%::prestige_tokens}
        else:
            if not {player::%{_uuid}%::%{_item}%} is set:
                set {player::%{_uuid}%::%{_item}%} to 0
            add {_quantity} to {player::%{_uuid}%::%{_item}%}
            
        # Remove listing
        remove {_listing_id} from {market::listings::*}
        remove {_listing_id} from {market::prices::*}
        remove {_listing_id} from {market::sellers::*}
        remove {_listing_id} from {market::types::*}
        remove {_listing_id} from {market::expiration::*}
        remove {_listing_id} from {market::quantity::*}
        remove {_listing_id} from {player::%{_seller}%::market_listings::*}
        
        # Notify players
        broadcast "{@prefix} &6%{player}% bought %{_quantity}% %{_item}% for %{_price}% ClickCoins!" to players with permission "raceclicker.market.view"
        send "{@prefix} &aSuccessfully bought %{_quantity}% %{_item}% for %{_price}% ClickCoins!" to player

# Function to view market listings
command /marketview:
    permission: raceclicker.market.view
    trigger:
        set {_listings} to "&6Market Listings:\n"
        
        loop {market::listings::*}:
            set {_index} to loop-index - 1
            set {_item} to loop-value
            set {_price} to {market::prices::%{_index}%}
            set {_seller} to {market::sellers::%{_index}%}
            set {_quantity} to {market::quantity::%{_index}%}
            set {_seller_name} to player from uuid {_seller}
            append "&7%{_index}%. %{_item}% &8x%{_quantity}% &6- %{_price}% ClickCoins &8(Seller: %{_seller_name}%)\n" to {_listings}
            
        send "{@prefix} %{_listings}%" to player

# Function to cancel market listing
command /marketcancel <number>:
    permission: raceclicker.market.list
    trigger:
        set {_uuid} to player's uuid
        set {_listing_id} to arg-1 - 1
        
        # Check if listing exists
        if {_listing_id} >= size of {market::listings::*}:
            send "{@prefix} &cInvalid listing ID!" to player
            return
            
        # Check if player owns listing
        if {market::sellers::%{_listing_id}%} is not {_uuid}:
            send "{@prefix} &cYou don't own this listing!" to player
            return
            
        # Get listing info
        set {_item} to {market::listings::%{_listing_id}%}
        set {_quantity} to {market::quantity::%{_listing_id}%}
        
        # Give items back to player
        if {_item} is "Prestige Tokens":
            add {_quantity} to {player::%{_uuid}%::prestige_tokens}
        else:
            add {_quantity} to {player::%{_uuid}%::%{_item}%}
            
        # Remove listing
        remove {_item} from {market::listings::*}
        remove {market::prices::%{_listing_id}%}
        remove {_uuid} from {market::sellers::*}
        remove {market::types::%{_listing_id}%}
        remove {market::expiration::%{_listing_id}%}
        remove {_quantity} from {market::quantity::*}
        remove {_listing_id} from {player::%{_uuid}%::market_listings::*}
        
        send "{@prefix} &aSuccessfully cancelled listing! Items returned to inventory." to player

# Function to refresh market
every {@market_refresh_time}:
    set {_expired_listings::*} to []
    
    # Identify expired listings
    loop {market::listings::*}:
        set {_index} to loop-index - 1
        if now > {market::expiration::%{_index}%}:
            add {_index} to {_expired_listings::*}
    
    # Remove expired listings and return items
    loop {_expired_listings::*}:
        set {_index} to loop-value
        set {_seller} to {market::sellers::%{_index}%}
        set {_item} to {market::listings::%{_index}%}
        set {_quantity} to {market::quantity::%{_index}%}
        
        # Return items to seller
        if {_item} is "Prestige Tokens":
            add {_quantity} to {player::%{_seller}%::prestige_tokens}
        else:
            add {_quantity} to {player::%{_seller}%::%{_item}%}
        
        # Remove listing
        remove {_index} from {market::listings::*}
        remove {_index} from {market::prices::*}
        remove {_index} from {market::sellers::*}
        remove {_index} from {market::types::*}
        remove {_index} from {market::expiration::*}
        remove {_index} from {market::quantity::*}
        
    # Notify players
    if size of {_expired_listings::*} > 0:
        broadcast "{@prefix} &aMarket has been refreshed! %{size of {_expired_listings::*}}% expired listings removed." to players with permission "raceclicker.market.view"
            
    broadcast "{@prefix} &aMarket has been refreshed! Expired listings removed." to players with permission "raceclicker.market.view"

# Function to collect market fees
every 24 hours:
    # Collect market fees
    set {_total_fees} to 0
    loop all players:
        set {_uuid} to loop-player's uuid
        if {player::%{_uuid}%::market_listings::*} is set:
            loop {player::%{_uuid}%::market_listings::*}:
                set {_index} to loop-value - 1
                set {_price} to {market::prices::%{_index}%}
                set {_fee} to {_price} * {@market_fee}
                add {_fee} to {_total_fees}
    
    if {_total_fees} > 0:
        add {_total_fees} to {market::total_fees}
        broadcast "{@prefix} &6Market fees collected: %{_total_fees}% ClickCoins!" to players with permission "raceclicker.market.admin"
